#!/usr/bin/env python3

# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import argparse
import sys
import os
import types

from sqlalchemy import create_engine
from sqlalchemy.orm import Session
from sqlalchemy.exc import OperationalError, ProgrammingError

from celery import Celery


celery = Celery('emcweb')


@celery.task
def test_celery(data):
    print(data)


def main():
    parser = argparse.ArgumentParser(description='EmcWeb - test connections.')
    parser.add_argument('-f',
                        metavar='<file>',
                        type=str,
                        help='Specify configuration file',
                        default='/var/lib/emcweb/settings/flask.py')
    args = parser.parse_args()

    if not os.path.exists(args.f):
        print('Cannot stat the configuration file (flask.py)')
        return -1

    conf = types.ModuleType('config')
    conf.__file__ = args.f
    with open(args.f) as config_file:
        exec(compile(config_file.read(), args.f, 'exec'), conf.__dict__)

    engine = create_engine(conf.SQLALCHEMY_DATABASE_URI)
    sess = Session(engine)

    try:
        result = sess.execute('select * from alembic_version')
    except OperationalError:
        print('Database connection refused')
        return 101
    except ProgrammingError:
        print('Database is not configured')
        return 102

    strings = [row[0] for row in result]
    if len(strings) < 1:
        print('Database is not configured')
        return 102

    celery.config_from_object(conf)
    try:
        test_celery.delay()
    except:
        print('Celery transport connection refused')
        return 102


if __name__ == '__main__':
    sys.exit(main())
